import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { ROUTES } from '../../utils/constant';
import Navbar from '../shared/Navbar';
import { User, UserCog, ArrowLeft, Save, Edit2, Ruler, Scale, Utensils, Target, Loader2 } from 'lucide-react';
import { toast } from 'react-toastify';

const Profile = () => {
    const navigate = useNavigate();
    const [user, setUser] = useState(null);
    const [isEditing, setIsEditing] = useState(false);
    const [isLoading, setIsLoading] = useState(false);
    const [formData, setFormData] = useState({
        fullname: '',
        age: '',
        height: '',
        weight: '',
        dietaryPreferences: '',
        healthGoals: ''
    });

    useEffect(() => {
        const loadUserData = async () => {
            try {
                const savedUser = localStorage.getItem('user');
                if (!savedUser) {
                    navigate(ROUTES.LOGIN);
                    return;
                }
                const userData = JSON.parse(savedUser);
                setUser(userData);
                setFormData({
                    fullname: userData.fullname || '',
                    age: userData.age || '',
                    height: userData.height || '',
                    weight: userData.weight || '',
                    dietaryPreferences: userData.dietaryPreferences || '',
                    healthGoals: userData.healthGoals || ''
                });
            } catch (error) {
                console.error('Error loading user data:', error);
                toast.error('Failed to load profile data');
            }
        };

        loadUserData();
    }, [navigate]);

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: value
        }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setIsLoading(true);
        try {
            // Simulate API call
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            const updatedUser = { ...user, ...formData };
            localStorage.setItem('user', JSON.stringify(updatedUser));
            setUser(updatedUser);
            setIsEditing(false);
            toast.success('Profile updated successfully!');
        } catch (error) {
            console.error('Error updating profile:', error);
            toast.error('Failed to update profile');
        } finally {
            setIsLoading(false);
        }
    };

    if (!user) {
        return (
            <div className="min-h-screen flex items-center justify-center bg-gray-50">
                <Loader2 className="h-8 w-8 animate-spin text-green-600" />
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gray-50">
            <Navbar />
            <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                <div className="bg-white shadow-xl rounded-xl overflow-hidden">
                    {/* Header */}
                    <div className="bg-gradient-to-r from-green-600 to-emerald-500 px-6 py-8 text-white">
                        <div className="flex items-center justify-between">
                            <div className="flex items-center space-x-4">
                                <div className="p-3 bg-white/20 rounded-full">
                                    <UserCog className="h-8 w-8" />
                                </div>
                                <div>
                                    <h1 className="text-2xl font-bold">My Profile</h1>
                                    <p className="text-green-100">Manage your personal information</p>
                                </div>
                            </div>
                            <button
                                onClick={() => setIsEditing(!isEditing)}
                                className={`flex items-center space-x-2 px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                                    isEditing
                                        ? 'bg-white/20 hover:bg-white/30'
                                        : 'bg-white text-green-700 hover:bg-green-50'
                                }`}
                            >
                                {isEditing ? (
                                    <>
                                        <ArrowLeft className="h-4 w-4" />
                                        <span>Cancel</span>
                                    </>
                                ) : (
                                    <>
                                        <Edit2 className="h-4 w-4" />
                                        <span>Edit Profile</span>
                                    </>
                                )}
                            </button>
                        </div>
                    </div>

                    <div className="p-6">
                        {isEditing ? (
                            <form onSubmit={handleSubmit} className="space-y-6">
                                <div className="grid grid-cols-1 gap-6 sm:grid-cols-2">
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-1">Full Name</label>
                                        <div className="relative">
                                            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                                <User className="h-5 w-5 text-gray-400" />
                                            </div>
                                            <input
                                                type="text"
                                                name="fullname"
                                                value={formData.fullname}
                                                onChange={handleInputChange}
                                                className="pl-10 w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"
                                                required
                                            />
                                        </div>
                                    </div>

                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-1">Age</label>
                                        <input
                                            type="number"
                                            name="age"
                                            value={formData.age}
                                            onChange={handleInputChange}
                                            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"
                                            min="0"
                                            max="120"
                                        />
                                    </div>

                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-1">Height (cm)</label>
                                        <div className="relative">
                                            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                                <Ruler className="h-5 w-5 text-gray-400" />
                                            </div>
                                            <input
                                                type="number"
                                                name="height"
                                                value={formData.height}
                                                onChange={handleInputChange}
                                                className="pl-10 w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"
                                                min="0"
                                                step="0.1"
                                            />
                                        </div>
                                    </div>

                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-1">Weight (kg)</label>
                                        <div className="relative">
                                            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                                <Scale className="h-5 w-5 text-gray-400" />
                                            </div>
                                            <input
                                                type="number"
                                                name="weight"
                                                value={formData.weight}
                                                onChange={handleInputChange}
                                                className="pl-10 w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"
                                                min="0"
                                                step="0.1"
                                            />
                                        </div>
                                    </div>

                                    <div className="sm:col-span-2">
                                        <label className="block text-sm font-medium text-gray-700 mb-1">
                                            <div className="flex items-center">
                                                <Utensils className="h-4 w-4 mr-1 text-gray-500" />
                                                Dietary Preferences
                                            </div>
                                        </label>
                                        <textarea
                                            name="dietaryPreferences"
                                            value={formData.dietaryPreferences}
                                            onChange={handleInputChange}
                                            rows={3}
                                            className="mt-1 block w-full rounded-lg border border-gray-300 focus:ring-2 focus:ring-green-500 focus:border-green-500"
                                            placeholder="E.g., Vegetarian, Gluten-free, etc."
                                        />
                                    </div>

                                    <div className="sm:col-span-2">
                                        <label className="block text-sm font-medium text-gray-700 mb-1">
                                            <div className="flex items-center">
                                                <Target className="h-4 w-4 mr-1 text-gray-500" />
                                                Health Goals
                                            </div>
                                        </label>
                                        <textarea
                                            name="healthGoals"
                                            value={formData.healthGoals}
                                            onChange={handleInputChange}
                                            rows={3}
                                            className="mt-1 block w-full rounded-lg border border-gray-300 focus:ring-2 focus:ring-green-500 focus:border-green-500"
                                            placeholder="E.g., Lose weight, Build muscle, etc."
                                        />
                                    </div>
                                </div>

                                <div className="flex justify-end space-x-3 pt-4 border-t border-gray-200">
                                    <button
                                        type="button"
                                        onClick={() => setIsEditing(false)}
                                        className="px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 hover:bg-gray-50"
                                    >
                                        Cancel
                                    </button>
                                    <button
                                        type="submit"
                                        disabled={isLoading}
                                        className="px-4 py-2 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:opacity-50 flex items-center"
                                    >
                                        {isLoading ? (
                                            <>
                                                <Loader2 className="animate-spin -ml-1 mr-2 h-4 w-4" />
                                                Saving...
                                            </>
                                        ) : (
                                            <>
                                                <Save className="-ml-1 mr-2 h-4 w-4" />
                                                Save Changes
                                            </>
                                        )}
                                    </button>
                                </div>
                            </form>
                        ) : (
                            <div className="space-y-8">
                                <div className="grid grid-cols-1 gap-8 sm:grid-cols-2">
                                    <div className="bg-gray-50 p-4 rounded-lg">
                                        <div className="flex items-center space-x-3 mb-3">
                                            <div className="p-2 bg-green-100 rounded-full">
                                                <User className="h-5 w-5 text-green-600" />
                                            </div>
                                            <h3 className="text-sm font-medium text-gray-500">Full Name</h3>
                                        </div>
                                        <p className="text-lg font-medium text-gray-900 pl-11">{user.fullname || 'Not set'}</p>
                                    </div>

                                    <div className="bg-gray-50 p-4 rounded-lg">
                                        <div className="flex items-center space-x-3 mb-3">
                                            <div className="p-2 bg-blue-100 rounded-full">
                                                <User className="h-5 w-5 text-blue-600" />
                                            </div>
                                            <h3 className="text-sm font-medium text-gray-500">Age</h3>
                                        </div>
                                        <p className="text-lg font-medium text-gray-900 pl-11">{user.age || 'Not set'}</p>
                                    </div>

                                    <div className="bg-gray-50 p-4 rounded-lg">
                                        <div className="flex items-center space-x-3 mb-3">
                                            <div className="p-2 bg-purple-100 rounded-full">
                                                <Ruler className="h-5 w-5 text-purple-600" />
                                            </div>
                                            <h3 className="text-sm font-medium text-gray-500">Height</h3>
                                        </div>
                                        <p className="text-lg font-medium text-gray-900 pl-11">
                                            {user.height ? (
                                                <>{user.height} <span className="text-sm text-gray-500">cm</span></>
                                            ) : 'Not set'}
                                        </p>
                                    </div>

                                    <div className="bg-gray-50 p-4 rounded-lg">
                                        <div className="flex items-center space-x-3 mb-3">
                                            <div className="p-2 bg-yellow-100 rounded-full">
                                                <Scale className="h-5 w-5 text-yellow-600" />
                                            </div>
                                            <h3 className="text-sm font-medium text-gray-500">Weight</h3>
                                        </div>
                                        <p className="text-lg font-medium text-gray-900 pl-11">
                                            {user.weight ? (
                                                <>{user.weight} <span className="text-sm text-gray-500">kg</span></>
                                            ) : 'Not set'}
                                        </p>
                                    </div>

                                    <div className="bg-gray-50 p-4 rounded-lg sm:col-span-2">
                                        <div className="flex items-center space-x-3 mb-3">
                                            <div className="p-2 bg-red-100 rounded-full">
                                                <Utensils className="h-5 w-5 text-red-600" />
                                            </div>
                                            <h3 className="text-sm font-medium text-gray-500">Dietary Preferences</h3>
                                        </div>
                                        <p className="text-gray-700 pl-11">
                                            {user.dietaryPreferences || 'Not specified'}
                                        </p>
                                    </div>

                                    <div className="bg-gray-50 p-4 rounded-lg sm:col-span-2">
                                        <div className="flex items-center space-x-3 mb-3">
                                            <div className="p-2 bg-indigo-100 rounded-full">
                                                <Target className="h-5 w-5 text-indigo-600" />
                                            </div>
                                            <h3 className="text-sm font-medium text-gray-500">Health Goals</h3>
                                        </div>
                                        <p className="text-gray-700 pl-11">
                                            {user.healthGoals || 'Not specified'}
                                        </p>
                                    </div>
                                </div>
                            </div>
                        )}
                    </div>
                </div>
            </div>
        </div>
    );
};

export default Profile;
